name: Build

on:
  pull_request:
    branches:
      - master

  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        golang-version:
          - "1.17"
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Setup golang
        id: setup-go
        uses: actions/setup-go@v2
        with:
          go-version: '^${{ matrix.golang-version }}'

      - name: Cache golang
        id: cache-golang
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-${{ matrix.golang-version }}-golang-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.golang-version }}-golang-

      - name: Install golang dependencies
        run: go mod download -x
        if: |
          steps.cache-golang.outputs.cache-hit != 'true'


      - name: Build clickhouse-backup binary
        id: make
        env:
          GOROOT: ${{ env.GOROOT_1_17_X64 }}
        run: |
          make build-race
          make build/linux/amd64/clickhouse-backup build/linux/arm64/clickhouse-backup
          make config
          make test


      # be careful with encrypt with old OpenSSL - https://habr.com/ru/post/535140/
      - name: Decrypting credentials for Google Cloud Storage
        id: secrets
        env:
          VAULT_PASSWORD: ${{ secrets.VAULT_PASSWORD }}
        run: |
          if [[ "" != "${VAULT_PASSWORD}" ]]; then
            openssl version
            openssl enc -base64 -aes-256-cbc -d -in test/integration/credentials.json.enc -out test/integration/credentials.json -md md5 -k ${VAULT_PASSWORD}
          fi
          echo "::set-output name=GCS_TESTS::$(if [ -z "${{ secrets.VAULT_PASSWORD }}" ]; then echo "false"; else echo "true"; fi)"

      - uses: actions/upload-artifact@v2
        with:
          name: build-gcp-credentials
          path: |
            test/integration/credentials.json
          if-no-files-found: error
          retention-days: 1
        if: |
          steps.secrets.outputs.GCS_TESTS == 'true'

      - uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: |
            build/linux/amd64/clickhouse-backup
            build/linux/arm64/clickhouse-backup
          if-no-files-found: error
          retention-days: 1

      - uses: actions/upload-artifact@v2
        with:
          name: build-test-artifacts
          path: |
            clickhouse-backup/clickhouse-backup
            clickhouse-backup/clickhouse-backup-race
          if-no-files-found: error
          retention-days: 1
    outputs:
      GCS_TESTS: ${{ steps.secrets.outputs.GCS_TESTS }}

  test:
    needs: build
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        golang-version:
          - "1.17"
        clickhouse:
          - '1.1.54390'
          - '19.17'
          - '20.3'
          - '20.8'
          - '21.3'
          - '21.8'
          - '21.12'
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Setup golang
        id: setup-go
        uses: actions/setup-go@v2
        with:
          go-version: '^${{ matrix.golang-version }}'

      - name: Cache golang
        id: cache-golang
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-${{ matrix.golang-version }}-golang-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.golang-version }}-golang-

      - uses: actions/download-artifact@v2
        with:
          name: build-test-artifacts
          path: ./clickhouse-backup/

      - uses: actions/download-artifact@v2
        with:
          name: build-gcp-credentials
          path: ./test/integration/
        if: |
          needs.build.outputs.GCS_TESTS == 'true'

      - name: Running integration tests
        env:
          CLICKHOUSE_VERSION: ${{ matrix.clickhouse }}
          # RUN_TESTS: "TestSkipNotExistsTable"
          # LOG_LEVEL: "debug"
          # FTP_DEBUG: "true"
          CGO_ENABLED: 0
          GCS_TESTS: ${{ needs.build.outputs.GCS_TESTS }}
        run: |
          set -x
          echo "CLICKHOUSE_VERSION=${CLICKHOUSE_VERSION}"
          echo "GCS_TESTS=${GCS_TESTS}"

          chmod +x $(pwd)/clickhouse-backup/clickhouse-backup*

          if [[ "${CLICKHOUSE_VERSION}" == 2* ]]; then
            export COMPOSE_FILE=docker-compose_advanced.yml
          else
            export COMPOSE_FILE=docker-compose.yml
          fi
          export CLICKHOUSE_BACKUP_BIN="$(pwd)/clickhouse-backup/clickhouse-backup-race"
          docker-compose -f test/integration/${COMPOSE_FILE} up -d clickhouse
          docker-compose -f test/integration/${COMPOSE_FILE} ps -a
          go test -timeout 30m -failfast -tags=integration -run "${RUN_TESTS:-.+}" -v test/integration/integration_test.go

  docker:
    needs: test
    name: Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: ./build/linux/

      - name: Extract DOCKER_TAG version
        id: docker_tag
        run: |
          DOCKER_TAG=${GITHUB_REF##*/}
          export DOCKER_TAG=${DOCKER_TAG##*\\}
          echo "::set-output name=docker_tag::${DOCKER_TAG:-dev}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Building docker image
        env:
          DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_TAG: ${{ steps.docker_tag.outputs.docker_tag }}
        run: |
          if [[ "${DOCKER_TOKEN}" != "" ]]; then
            export DOCKER_REGISTRY=${DOCKER_REGISTRY:-docker.io}
            echo ${DOCKER_TOKEN} | docker login -u ${DOCKER_USER} --password-stdin ${DOCKER_REGISTRY}
            docker buildx build --platform=linux/amd64,linux/arm64 -t ${DOCKER_REGISTRY}/${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG} --pull --push .
          fi

  cleanup:
    name: Cleanup
    needs: docker
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: delete build-artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-artifacts
          failOnError: false

      - name: delete build-gcp-credentials
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-gcp-credentials
          failOnError: false
